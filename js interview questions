servicenow---> 
i/p[1,5,2,1,5,2,3,5,5,1] ... o/p [1, 2, 3, 5, 1, 2, 5, 1, 5, 5]


answer..
function removeDuplicates(arr)
{
  let newArr =[],unique={},tempArr=[];
 // newArr = arr.filter((item,index) => arr.indexOf(item) === index);//[1,2,3,5]
  if(arr.length===0) return;
  arr.forEach(function(i)//[1,1,2,5,5]
               {
    if(!unique[i])
      {
        unique[i] = true;
        tempArr.push(i);
        //[1,2,3,5][1,2,5]
      }
    else
      {
        newArr.push(i);
        
      }
  }) ;
  tempArr.sort();
  if(newArr.length!=0)//[1,1,2,5,5]
    {
      //newArr.
    tempArr =  tempArr.concat(removeDuplicates(newArr));
    }
  return tempArr;//[1,5]
}

console.log(removeDuplicates([1,5,2,1,5,2,3,5,5,1]));  


 https://codepen.io/vsunkari/pen/abvdogj?editors=1111

****************************************************
 http://collabedit.com/64sqb 
 1.two sum array.
 answer--- one solution---
 function twoSum(numArray, target){

  const numObject = {} //create an empty object

  for(let eachNum in numArray){

    const otherNum = target - numArray[eachNum]

    if(otherNum in numObject){

      return `${otherNum} + ${numArray[eachNum]} = ${target}`
    }

    numObject[numArray[eachNum]] = eachNum

//adding key/value has to go after the if statement to avoid adding the same index twice.
  }

  return "target not found"
}
****other solution *****binary search....
let binarySearch = (array, target, start=0, end=array.length-1) => {

    let midPoint = ~~(start + (end - start)/2)

    switch(true){
        case array[start] === target:
            return array[start]
        case array[midPoint] === target:
            return array[midPoint]
        case array[end] === target:
            return array[end]
        case end - start === 0:
            return false
        case array[midPoint] > target:
            return binarySearch(array, target, start+1, midPoint-1)
        case array[midPoint] < target:
            return binarySearch(array, target, midPoint+1, end-1)    
    }
    return false
}
*********other solution HASH***

let hashTwoSum = (array, sum) => {
    let storageHash = {}
    let nums = []
    
    for(let i in array){
      let addend = sum - array[i]
        
        if (addend in storageHash){
            nums.push([addend, array[i]])
        }
        storageHash[array[i]] = i
    }
    return nums
}


https://levelup.gitconnected.com/solving-the-two-sum-problem-in-javascript-three-ways-4d43067fcfc7
*************************
 2.i/p [1,0,1,1,1,0,0,0]-->o/p[0,0,0,0,1,1,1,1] --->one solution --// if(a[i] >a[i+1]) ... temp = a[i]...a[i]=a[i+1] and a[i+1]=temp;
 3.
 ************************************
 elevator design
 https://jsbin.com/sagurun/1/edit?html,js,console,output
 
 
 ***************************
 What is the output of the below code.?? (Uses closures concept)
const arr = [10, 12, 15, 21];
for (var i = 0; i < arr.length; i++) {
  setTimeout(function() {
    console.log('Index: ' + i + ', element: ' + arr[i]);
  }, 3000);
}
Gives 4, undefined (4 times)
const arr = [10, 12, 15, 21];
for (var i = 0; i < arr.length; i++) {
  // pass in the variable i so that each function 
  // has access to the correct index
  setTimeout(function(i_local) {
    return function() {
      console.log('The index of this number is: ' + i_local);
    }
  }(i), 3000);
}
Now prints 0, 10; 1, 12; ............
https://medium.com/coderbyte/a-tricky-javascript-interview-question-asked-by-google-and-amazon-48d212890703

Find the sum of the digits
I have a alpha-numeric string var str = 'abc1234def-567-123'; and would like to get the sum of the numbers that are present in the string. Ex: 1234+(-567)+(-123) so on.

https://jsbin.com/luparaz/edit?js,console

Find the best alogorithm / less complexity solution for below.
I have a array var arr = [5,6,7,1,2,3,4]; which is sorted but is rotated. I need to find the least number in the array (With Least Complexity).

https://jsbin.com/xatotas/edit?js,console

Find the output of the code.
https://jsbin.com/wadayi/edit?js,console,output

TODO List Scenario Questions
I want to design a todo list in angular how would you do.

What components would you require.?
ListComponent

<input type =="checkbox"/> My Todo
ToDoComponent - Fetch todo List - GET abc.com/list - Returns Full list of TO-DOs | For one record - bc.com/list ? id=123 - loop the list componentn for each todo list

CreateListComponent - Display Form - Collecitng the todo description - Validation

	Description: 
	Start Date: 
	Repeat: []
		Repeat Freq: <select
		End Date: <input 
	Submit:

- Populate in main todo list
	- API for saving the to-do - PUT abc.com/list
DB table design?
TODO_TABLE:

id | user_id | description | completed (ENUM) | status | created_date | start_date | end_date | repeat_feq (1hr|1day|1week|1month)
Find the users which have not completed atleast 50% of their tasks from the DB table above.
SELECT t.*, count(t.completed) FROM TODO_TABLE t HAVING GROUP BY user_id;

SELECT * FROM ( SELECT user_id,count(t.completed) as completed_count, t.completed FROM TODO_TABLE t HAVING end_date!=NULL && end_date < now() GROUP BY user_id, completed; ) as t WHERE t.

user_id | completed | completed 1 | 10 1 | 12 2 | 3 2 | 5

-- X --
Design an Elevator
https://jsbin.com/sagurun/1/edit?html,js,console,output

